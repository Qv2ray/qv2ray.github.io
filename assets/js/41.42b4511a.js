(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{407:function(e,t,a){"use strict";a.r(t);var i=a(16),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"编写插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写插件"}},[e._v("#")]),e._v(" 编写插件")]),e._v(" "),a("ul",[a("li",[e._v("Qv2ray 插件文档")])]),e._v(" "),a("h2",{attrs:{id:"插件是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件是什么"}},[e._v("#")]),e._v(" 插件是什么")]),e._v(" "),a("p",[e._v("A plugin is, technically, a shared library that implements a specific interface, "),a("code",[e._v("Qv2rayPlugin::QvPluginInterface")]),e._v(" in this case. 因此可以被 Qv2ray 加载。")]),e._v(" "),a("h2",{attrs:{id:"prerequisites-when-writing-a-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites-when-writing-a-plugin"}},[e._v("#")]),e._v(" Prerequisites when writing a plugin")]),e._v(" "),a("h3",{attrs:{id:"compiler-version-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-version-options"}},[e._v("#")]),e._v(" Compiler Version / Options")]),e._v(" "),a("ul",[a("li",[e._v("For Linux and macOS, there’s no compiler limitations.")]),e._v(" "),a("li",[e._v("MSVC is required when compiling a plugin.")]),e._v(" "),a("li",[a("code",[e._v("-fno-sized-deallocation")]),e._v(" Should be used when compiling the plugin, especially when “"),a("strong",[e._v("Building plugins using Github Action")]),e._v("”")])]),e._v(" "),a("h3",{attrs:{id:"qt-version-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt-version-limitations"}},[e._v("#")]),e._v(" Qt Version Limitations")]),e._v(" "),a("ul",[a("li",[e._v("It’s a Qt limit that the version which a plugin was built against should not be greater than that of the loader application (Qv2ray in this case)")]),e._v(" "),a("li",[e._v("We suggest building plugins using "),a("code",[e._v("Qt 5.11.3")]),e._v(" since it’s the oldest version Qv2ray supports.")])]),e._v(" "),a("h3",{attrs:{id:"third-party-link-time-and-or-run-time-dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#third-party-link-time-and-or-run-time-dependencies"}},[e._v("#")]),e._v(" Third-party link-time and/or run-time dependencies")]),e._v(" "),a("ul",[a("li",[e._v("These dependencies "),a("strong",[e._v("should")]),e._v(" be statically linked into the plugin library, otherwise:\n"),a("ul",[a("li",[e._v("Tell the users to download/install all dependencies’ library from wherever they can.")])])]),e._v(" "),a("li",[a("strong",[e._v("Exception: OpenSSL "),a("em",[e._v("SHOULD NOT")]),e._v(" be statically linked.")]),e._v(" "),a("ul",[a("li",[e._v("Qv2ray has its own OpenSSL dependency check and will make sure a compatible OpenSSL has been installed.")])])])]),e._v(" "),a("h2",{attrs:{id:"creating-a-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-plugin"}},[e._v("#")]),e._v(" Creating a plugin")]),e._v(" "),a("p",[e._v("You have 2 choices when initiating a plugin.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Creating plugin using provided "),a("code",[e._v("Template")]),e._v(" project:")]),e._v(" "),a("p",[e._v("There’s a repository called "),a("a",{attrs:{href:"https://github.com/Qv2ray/QvPlugin-Template",target:"_blank",rel:"noopener noreferrer"}},[e._v("QvPlugin-Template"),a("OutboundLink")],1),e._v(", which can be used to create your own plugin.")])]),e._v(" "),a("li",[a("p",[e._v("Creating plugin from from scratch.")])])]),e._v(" "),a("h3",{attrs:{id:"_1-using-the-template-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-using-the-template-project"}},[e._v("#")]),e._v(" 1. Using the template project")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Click the “Use This Plugin” in the Github Repository page and follow the instructions.")])]),e._v(" "),a("li",[a("p",[e._v("Clone your repository just created.")])]),e._v(" "),a("li",[a("p",[e._v("Execute the command, since Github didn’t persist submodule data within the template repo.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" submodule "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" --force https://github.com/Qv2ray/QvPlugin-Interface/ ./interface\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Select your "),a("code",[e._v("Build Generator")]),e._v(", by doing: Remove unwanted project files e.g. "),a("code",[e._v("QvSimplePlugin.pro")]),e._v(" or "),a("code",[e._v("CMakeLists.txt")]),e._v(" Remove unwanted CI configurations by removing it from "),a("code",[e._v("./.github/workflows/")])])]),e._v(" "),a("li",[a("p",[e._v("Open the "),a("code",[e._v(".pro")]),e._v(" file or "),a("code",[e._v("CMakeLists.txt")]),e._v(" in QtCreator.")])]),e._v(" "),a("li",[a("p",[e._v("Do any modifications "),a("strong",[e._v("especially plugin metadata")]),e._v(" in the "),a("code",[e._v("QvSimplePlugin.hpp")])])]),e._v(" "),a("li",[a("p",[e._v("Test build locally, then push to the Github to see if the Github Action can pass.")])])]),e._v(" "),a("h3",{attrs:{id:"_2-creating-a-plugin-from-scratch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-creating-a-plugin-from-scratch"}},[e._v("#")]),e._v(" 2. Creating a plugin from scratch")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Create a git repoaitory")])]),e._v(" "),a("li",[a("p",[e._v("Add plugin interface in "),a("code",[e._v("https://github.com/Qv2ray/QvPlugin-Interface/")]),e._v(" as a submodule")])]),e._v(" "),a("li",[a("p",[e._v("Include "),a("code",[e._v("QvPluginInterface.cmake")]),e._v(" or "),a("code",[e._v("QvPluginInterface.pri")]),e._v(" into your project file.")])]),e._v(" "),a("li",[a("p",[e._v("Write a class, which inherits "),a("code",[e._v("Qv2rayPlugin::Qv2rayInterface")]),e._v(" and implement every virtual functions.")])]),e._v(" "),a("li",[a("p",[e._v("Add slot declaration of those functions:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("PluginLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" QString "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("PluginErrorMessageBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" QString "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("You may return a "),a("code",[e._v("nullptr")]),e._v(" in "),a("code",[e._v("GetPluginKernel")]),e._v(" function if your plugin does not have "),a("code",[e._v("SPECIAL_TYPE_KERNEL")]),e._v(" in the metadata. The same as "),a("code",[e._v("GetSerializer")]),e._v(", but "),a("strong",[e._v("do not return "),a("code",[e._v("nullptr")]),e._v(" in the "),a("code",[e._v("GetEventHandler()")])]),e._v(".")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);