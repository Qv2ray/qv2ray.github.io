(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{412:function(_,v,e){"use strict";e.r(v);var c=e(16),o=Object(c.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"cmake-相关选项说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmake-相关选项说明"}},[_._v("#")]),_._v(" CMake 相关选项说明")]),_._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[_._v("WIP")]),_._v(" "),e("p",[_._v("本部分正在施工中，英文文档部分完工之后即将开写。")]),_._v(" "),e("p",[_._v("敬请期待")])]),_._v(" "),e("h2",{attrs:{id:"qv2ray"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#qv2ray"}},[_._v("#")]),_._v(" Qv2ray")]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("QV2RAY_DISABLE_AUTO_UPDATE")]),_._v(": 设为 "),e("code",[_._v("ON")]),_._v(" 时将禁用内置的新版本检查。通过包管理器控制的渠道分发 Qv2ray 时，此项很有用。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_BUILD_INFO")]),_._v(" 及 "),e("code",[_._v("QV2RAY_BUILD_EXTRA_INFO")]),_._v(": 设定之后，这些文本将显示于 Qv2ray 的“关于”对话框中。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_DEFAULT_VASSETS_PATH")]),_._v(" 及 "),e("code",[_._v("QV2RAY_DEFAULT_VCORE_PATH")]),_._v(": 默认为 "),e("code",[_._v('"unset"')]),_._v("。设定之后，初次启动时将会优先检查这些位置的 V2Ray 核心。将 Qv2ray 分发到核心路径固定的平台上时，此项很有用。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_HAS_BUILT_IN_THEMES")]),_._v(": 设为 "),e("code",[_._v("ON")]),_._v(" 后，Qv2ray 会将内置主题 (例如 "),e("code",[_._v("psblack")]),_._v(" 和 "),e("code",[_._v("flatwhite")]),_._v(") 一并带上。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_AUTO_DEPLOY")]),_._v(": 设为 "),e("code",[_._v("ON")]),_._v(" 后，构建完成之后会自动运行 Qt 的部署（deployment）命令。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_TRANSLATION_PATH")]),_._v(": 默认为 "),e("code",[_._v('"unset"')]),_._v("。设定之后，会从所指定的路径搜索翻译文件。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("EMBED_TRANSLATIONS")]),_._v(": 设为 "),e("code",[_._v("ON")]),_._v(" 后，翻译资源文件 ("),e("code",[_._v("*.qm")]),_._v(") 将被直接嵌入二进制中，而不是被安装到 "),e("code",[_._v("/usr/share/qv2ray/translations/")]),_._v(" 之类的路径里。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("BUILD_TESTING")]),_._v(": 设为 "),e("code",[_._v("ON")]),_._v(" 后，构建时会包含单元测试。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QVPLUGIN_INTERFACE_INCLUDE_DIR")]),_._v(": 插件接口源码的路径。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("QV2RAY_QNODEEDITOR_PROVIDER")]),_._v(", "),e("code",[_._v("QV2RAY_ZXING_PROVIDER")]),_._v(" 及 "),e("code",[_._v("QV2RAY_SINGLEAPPLICATION_PROVIDER")]),_._v(": 默认为 "),e("code",[_._v('"module"')]),_._v("。当设为 "),e("code",[_._v('"package"')]),_._v(" 时，构建时将从系统查找并动态链接到这些依赖，而非从 Git 子模块的源码构建并静态链接。")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("USE_SYSTEM_LIBUV")]),_._v(": 默认为 "),e("code",[_._v("OFF")]),_._v("。设为 "),e("code",[_._v("ON")]),_._v(" 后，将使用并动态链接到系统的 "),e("code",[_._v("libuv")]),_._v("。要开启此选项，需格外注意系统的 "),e("code",[_._v("libuv")]),_._v(" 版本。")])])])])}),[],!1,null,null,null);v.default=o.exports}}]);