(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{401:function(t,e,a){"use strict";a.r(e);var i=a(16),n=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"writing-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-plugins"}},[t._v("#")]),t._v(" Writing Plugins")]),t._v(" "),a("ul",[a("li",[t._v("Qv2ray Plugin Documentations")])]),t._v(" "),a("h2",{attrs:{id:"what-is-a-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-plugin"}},[t._v("#")]),t._v(" What is a plugin")]),t._v(" "),a("p",[t._v("A plugin is, technically, a shared library that implements a specific interface, "),a("code",[t._v("Qv2rayPlugin::QvPluginInterface")]),t._v(" in this case. So that can be loaded by Qv2ray.")]),t._v(" "),a("h2",{attrs:{id:"prerequisites-when-writing-a-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites-when-writing-a-plugin"}},[t._v("#")]),t._v(" Prerequisites when writing a plugin")]),t._v(" "),a("h3",{attrs:{id:"compiler-version-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-version-options"}},[t._v("#")]),t._v(" Compiler Version / Options")]),t._v(" "),a("ul",[a("li",[t._v("For Linux and macOS, there’s no compiler limitations.")]),t._v(" "),a("li",[t._v("MSVC is required when compiling a plugin.")]),t._v(" "),a("li",[a("code",[t._v("-fno-sized-deallocation")]),t._v(" Should be used when compiling the plugin, especially when “"),a("strong",[t._v("Building plugins using Github Action")]),t._v("”")])]),t._v(" "),a("h3",{attrs:{id:"qt-version-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt-version-limitations"}},[t._v("#")]),t._v(" Qt Version Limitations")]),t._v(" "),a("ul",[a("li",[t._v("It’s a Qt limit that the version which a plugin was built against should not be greater than that of the loader application (Qv2ray in this case)")]),t._v(" "),a("li",[t._v("We suggest building plugins using "),a("code",[t._v("Qt 5.11.3")]),t._v(" since it’s the oldest version Qv2ray supports.")])]),t._v(" "),a("h3",{attrs:{id:"third-party-link-time-and-or-run-time-dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#third-party-link-time-and-or-run-time-dependencies"}},[t._v("#")]),t._v(" Third-party link-time and/or run-time dependencies")]),t._v(" "),a("ul",[a("li",[t._v("These dependencies "),a("strong",[t._v("should")]),t._v(" be statically linked into the plugin library, otherwise:\n"),a("ul",[a("li",[t._v("Tell the users to download/install all dependencies’ library from wherever they can.")])])]),t._v(" "),a("li",[a("strong",[t._v("Exception: OpenSSL "),a("em",[t._v("SHOULD NOT")]),t._v(" be statically linked.")]),t._v(" "),a("ul",[a("li",[t._v("Qv2ray has its own OpenSSL dependency check and will make sure a compatible OpenSSL has been installed.")])])])]),t._v(" "),a("h2",{attrs:{id:"creating-a-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-plugin"}},[t._v("#")]),t._v(" Creating a plugin")]),t._v(" "),a("p",[t._v("You have 2 choices when initiating a plugin.")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Creating plugin using provided "),a("code",[t._v("Template")]),t._v(" project:")]),t._v(" "),a("p",[t._v("There’s a repository called "),a("a",{attrs:{href:"https://github.com/Qv2ray/QvPlugin-Template",target:"_blank",rel:"noopener noreferrer"}},[t._v("QvPlugin-Template"),a("OutboundLink")],1),t._v(", which can be used to create your own plugin.")])]),t._v(" "),a("li",[a("p",[t._v("Creating plugin from from scratch.")])])]),t._v(" "),a("h3",{attrs:{id:"_1-using-the-template-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-using-the-template-project"}},[t._v("#")]),t._v(" 1. Using the template project")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Click the “Use This Plugin” in the Github Repository page and follow the instructions.")])]),t._v(" "),a("li",[a("p",[t._v("Clone your repository just created.")])]),t._v(" "),a("li",[a("p",[t._v("Execute the command, since Github didn’t persist submodule data within the template repo.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --force https://github.com/Qv2ray/QvPlugin-Interface/ ./interface\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Select your "),a("code",[t._v("Build Generator")]),t._v(", by doing:\nRemove unwanted project files e.g. "),a("code",[t._v("QvSimplePlugin.pro")]),t._v(" or "),a("code",[t._v("CMakeLists.txt")]),t._v("\nRemove unwanted CI configurations by removing it from "),a("code",[t._v("./.github/workflows/")])])]),t._v(" "),a("li",[a("p",[t._v("Open the "),a("code",[t._v(".pro")]),t._v(" file or "),a("code",[t._v("CMakeLists.txt")]),t._v(" in QtCreator.")])]),t._v(" "),a("li",[a("p",[t._v("Do any modifications "),a("strong",[t._v("especially plugin metadata")]),t._v(" in the "),a("code",[t._v("QvSimplePlugin.hpp")])])]),t._v(" "),a("li",[a("p",[t._v("Test build locally, then push to the Github to see if the Github Action can pass.")])])]),t._v(" "),a("h3",{attrs:{id:"_2-creating-a-plugin-from-scratch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-creating-a-plugin-from-scratch"}},[t._v("#")]),t._v(" 2. Creating a plugin from scratch")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Create a git repoaitory")])]),t._v(" "),a("li",[a("p",[t._v("Add plugin interface in "),a("code",[t._v("https://github.com/Qv2ray/QvPlugin-Interface/")]),t._v(" as a submodule")])]),t._v(" "),a("li",[a("p",[t._v("Include "),a("code",[t._v("QvPluginInterface.cmake")]),t._v(" or "),a("code",[t._v("QvPluginInterface.pri")]),t._v(" into your project file.")])]),t._v(" "),a("li",[a("p",[t._v("Write a class, which inherits "),a("code",[t._v("Qv2rayPlugin::Qv2rayInterface")]),t._v(" and implement every virtual functions.")])]),t._v(" "),a("li",[a("p",[t._v("Add slot declaration of those functions:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PluginLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" QString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("PluginErrorMessageBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" QString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("You may return a "),a("code",[t._v("nullptr")]),t._v(" in "),a("code",[t._v("GetPluginKernel")]),t._v(" function if your plugin does not have "),a("code",[t._v("SPECIAL_TYPE_KERNEL")]),t._v(" in the metadata.\nThe same as "),a("code",[t._v("GetSerializer")]),t._v(", but "),a("strong",[t._v("do not return "),a("code",[t._v("nullptr")]),t._v(" in the "),a("code",[t._v("GetEventHandler()")])]),t._v(".")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);